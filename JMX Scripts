#!/bin/bash
# Configuration variables
REMOTE_HOST="remote-host.example.com"
REMOTE_PORT="9999" # JMX port of the remote application
JMX_USERNAME="" # Leave empty if no authentication required
JMX_PASSWORD="" # Leave empty if no authentication required
MBEAN_NAME="com.example:type=Application,name=VersionInfo"
OPERATION_NAME="getBuildVersion" # Changed from ATTRIBUTE_NAME to OPERATION_NAME
TARGET_SCRIPT="/path/to/your/script.sh"
JAVA_CLASS_PATH="." # Path to the directory containing InvokeJmxOperation.class

# Check if the Java class exists and compile if needed
if [ ! -f "${JAVA_CLASS_PATH}/InvokeJmxOperation.class" ]; then
    if [ ! -f "${JAVA_CLASS_PATH}/InvokeJmxOperation.java" ]; then
        echo "Error: InvokeJmxOperation.java not found in ${JAVA_CLASS_PATH}"
        exit 1
    fi
    
    echo "Compiling InvokeJmxOperation.java..."
    javac "${JAVA_CLASS_PATH}/InvokeJmxOperation.java"
    
    if [ $? -ne 0 ]; then
        echo "Failed to compile Java program."
        exit 1
    fi
fi

# Run the Java program to invoke the operation via JMX
if [ -n "$JMX_USERNAME" ]; then
    VERSION=$(java -cp "$JAVA_CLASS_PATH" InvokeJmxOperation "$REMOTE_HOST" "$REMOTE_PORT" "$MBEAN_NAME" "$OPERATION_NAME" "$JMX_USERNAME" "$JMX_PASSWORD")
else
    VERSION=$(java -cp "$JAVA_CLASS_PATH" InvokeJmxOperation "$REMOTE_HOST" "$REMOTE_PORT" "$MBEAN_NAME" "$OPERATION_NAME")
fi

# Check if VERSION was successfully retrieved
if [ $? -ne 0 ] || [ -z "$VERSION" ]; then
    echo "Failed to retrieve version information."
    exit 1
fi

echo "Retrieved application version: $VERSION"

# Execute the target script with the version as parameter
echo "Executing target script with version parameter..."
$TARGET_SCRIPT "$VERSION"

exit 0



import javax.management.*;
import javax.management.remote.*;
import java.io.IOException;

public class InvokeJmxOperation {
    public static void main(String[] args) {
        if (args.length < 4) {
            System.err.println("Usage: InvokeJmxOperation <host> <port> <mbean-name> <operation-name> [username] [password]");
            System.exit(1);
        }

        String host = args[0];
        String port = args[1];
        String mbeanName = args[2];
        String operationName = args[3];
        String username = args.length > 4 ? args[4] : null;
        String password = args.length > 5 ? args[5] : null;

        try {
            // Construct JMX service URL
            JMXServiceURL url = new JMXServiceURL(
                    "service:jmx:rmi:///jndi/rmi://" + host + ":" + port + "/jmxrmi");
            
            // Configure connection environment
            JMXConnector jmxc;
            if (username != null && !username.isEmpty()) {
                String[] credentials = new String[] { username, password };
                java.util.Map<String, Object> env = new java.util.HashMap<>();
                env.put(JMXConnector.CREDENTIALS, credentials);
                jmxc = JMXConnectorFactory.connect(url, env);
            } else {
                jmxc = JMXConnectorFactory.connect(url);
            }
            
            // Get MBean server connection
            MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();
            
            // Create ObjectName instance for the MBean
            ObjectName objectName = new ObjectName(mbeanName);
            
            // Invoke the operation (with no parameters)
            Object result = mbsc.invoke(objectName, operationName, new Object[]{}, new String[]{});
            
            // Close the connection
            jmxc.close();
            
            // Output the result
            System.out.println(result);
            
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }
}
