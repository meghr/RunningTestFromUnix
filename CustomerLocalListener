#!/bin/bash
TESTNG_JAR="path/to/testng.jar"
LISTENER_DIR="path/to/listener/directory"

for xml_file in *.xml; do
    mvn test -Dtestng.dtd.http=false \
             -Dsurefire.suiteXmlFiles="$xml_file" \
             -Dmaven.test.failure.ignore=true \
             -DargLine="-cp $TESTNG_JAR:$LISTENER_DIR"
done


import org.testng.ISuite;
import org.testng.ISuiteListener;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantLock;

public class CustomTestListener implements ITestListener, ISuiteListener {
    private static final String REPORT_FILE = "test_report.html";
    private static final ReentrantLock lock = new ReentrantLock();
    private static LocalDateTime firstTestStartTime;
    private static LocalDateTime lastTestStartTime;
    private static final Map<String, StringBuilder> suiteResults = new ConcurrentHashMap<>();
    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    @Override
    public void onStart(ISuite suite) {
        // Initialize suite-specific buffer
        suiteResults.putIfAbsent(suite.getName(), new StringBuilder());
    }

    @Override
    public void onFinish(ISuite suite) {
        writeReport();
    }

    @Override
    public void onTestStart(ITestResult result) {
        LocalDateTime now = LocalDateTime.now();
        lock.lock();
        try {
            if (firstTestStartTime == null) {
                firstTestStartTime = now;
            }
            lastTestStartTime = now;
        } finally {
            lock.unlock();
        }
    }

    @Override
    public void onTestSuccess(ITestResult result) {
        appendTestResult(result, "PASSED");
    }

    @Override
    public void onTestFailure(ITestResult result) {
        appendTestResult(result, "FAILED");
    }

    @Override
    public void onTestSkipped(ITestResult result) {
        appendTestResult(result, "SKIPPED");
    }

    private void appendTestResult(ITestResult result, String status) {
        String suiteName = result.getTestContext().getSuite().getName();
        StringBuilder sb = suiteResults.get(suiteName);
        
        long duration = result.getEndMillis() - result.getStartMillis();
        String failureReason = status.equals("FAILED") ? 
            (result.getThrowable() != null ? result.getThrowable().getMessage() : "Unknown error") : "";

        lock.lock();
        try {
            sb.append("<tr>")
                .append("<td>").append(suiteName).append("</td>")
                .append("<td>").append(result.getMethod().getMethodName()).append("</td>")
                .append("<td>").append(status).append("</td>")
                .append("<td>").append(failureReason).append("</td>")
                .append("<td>").append(duration).append(" ms</td>")
                .append("</tr>");
        } finally {
            lock.unlock();
        }
    }

    private void writeReport() {
        lock.lock();
        try {
            StringBuilder html = new StringBuilder();
            html.append("<!DOCTYPE html><html><head>")
                .append("<style>table {border-collapse: collapse; width: 100%;}")
                .append("th, td {border: 1px solid black; padding: 8px; text-align: left;}")
                .append("th {background-color: #f2f2f2;}</style>")
                .append("</head><body>");

            // Section 1: Summary
            html.append("<h2>Test Execution Summary</h2>")
                .append("<p>First Test Start Time: ").append(firstTestStartTime.format(formatter)).append("</p>")
                .append("<p>Last Test Start Time: ").append(lastTestStartTime.format(formatter)).append("</p>")
                .append("<p>Total Duration: ")
                .append(java.time.Duration.between(firstTestStartTime, lastTestStartTime).toMillis())
                .append(" ms</p>");

            // Section 2: Detailed Results
            html.append("<h2>Detailed Test Results</h2>")
                .append("<table>")
                .append("<tr><th>Suite Name</th><th>Test Method</th><th>Status</th><th>Failure Reason</th><th>Duration</th></tr>");

            for (StringBuilder suiteResult : suiteResults.values()) {
                html.append(suiteResult);
            }

            html.append("</table></body></html>");

            // Append to existing file or create new
            try (FileWriter writer = new FileWriter(REPORT_FILE, true)) {
                if (Files.size(Paths.get(REPORT_FILE)) == 0) {
                    writer.write(html.toString());
                } else {
                    // Append only the table rows if file exists
                    for (StringBuilder suiteResult : suiteResults.values()) {
                        writer.write(suiteResult.toString());
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
}

javac -cp "path/to/testng.jar" CustomTestListener.java


<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="TestSuite" parallel="tests" thread-count="10">
    <listeners>
        <listener class-name="CustomTestListener"/>
    </listeners>
    <!-- Your test classes -->
</suite>
